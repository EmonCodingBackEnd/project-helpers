<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.coding.helpers</groupId>
    <artifactId>helper-archetype-cloud</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>maven-archetype</packaging>

    <name>helper-archetype-cloud</name>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <build>
        <extensions>
            <extension>
                <groupId>org.apache.maven.archetype</groupId>
                <artifactId>archetype-packaging</artifactId>
                <version>3.0.1</version>
            </extension>
        </extensions>

        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <!--手动添加 beg-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <includeEmptyDirs>true</includeEmptyDirs>
                    <addDefaultExcludes>false</addDefaultExcludes>
                </configuration>
            </plugin>
        </plugins>
        <!--手动添加 end-->
    </build>

    <description>Parent pom providing dependency and plugin management for applications
        built with Maven
    </description>

    <url>https://github.com/EmonCodingBackEnd/tool-project/helper-dependencies/helper-parent/helper-archetype</url>

    <developers>
        <developer>
            <name>Rushing0711</name>
            <email>liming20110711@163.com</email>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <scm>
        <url>
            https://github.com/spring-projects/spring-boot/spring-boot-starter-parent/project-helpers/helper-dependencies/helper-parent/helper-archetype
        </url>
    </scm>

    <distributionManagement>
        <repository>
            <id>nexus-releases</id>
            <name>nexus release Repository</name>
            <url>http://repo.emon.vip/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>nexus snapshots Repository</name>
            <url>http://repo.emon.vip/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
</project>
        <!--
        心得体会：
        1、使用自定义archetype创建多模块新项目，最外层pom.xml乱码的问题，如何解决？
        被这个问题折磨了接近两天，机缘巧合得知如下解决方式：
        首先，本文件配置关于编码配置：
            <properties>
                <java.version>1.8</java.version>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
                <maven.compiler.source>${java.version}</maven.compiler.source>
                <maven.compiler.target>${java.version}</maven.compiler.target>
            </properties>
        其次，最外层的pom.xml(**/archetype-resources/pom.xml)要添加多模块的描述：
            <modules>
                <module>${rootArtifactId}-client</module>
                <module>${rootArtifactId}-common</module>
                <module>${rootArtifactId}-server</module>
            </modules>
            与
        <dependencies>-->
        <!-- 引入三方包 beg -->
        <!-- 引入三方包 end -->

        <!-- 引入二方包 beg -->
        <!-- 引入二方包 end -->

        <!-- 引入一方包 beg -->
        <!-- 引入一方包 end -->
        <!--</dependencies>
        这样，使用自定义archetype创建项目时，最外层pom.xml不会被再次解析，也就不会出现乱码问题了。
        2、其他修改
        文件pom.xml(**/archetype-resources/__rootArtifactId__-server/pom.xml)修改如下：
        helper-archetype-provider => ${rootArtifactId}-provider
        -->